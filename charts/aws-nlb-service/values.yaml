# Default values
#
# Set config values that will be pass as a
# envFrom section
#
configmap: {}

webService:
  #
  # Default image:
  # NGINX webserver that serves a simple page containing its hostname, IP address and port
  # https://hub.docker.com/r/nginxdemos/hello/tags
  #
  image: stefanprodan/podinfo

maintenance_mode: false # The value to true launches the command for maintenance action and cancels the standard command and the entrypointFile

deployment:
  app: example
  replicas: 1
  containerPort: 9898
  command: {} # Normal command
  #
  # Resources limits and requests.
  # This are the default values.
  # The values are in millicores and megabytes.
  # This values are required to run the pod.
  #
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  entrypointFile: # Command mounted as entrypoint with special values
  #
  # Enables the node selector.
  # Example:
  # nodeSelector:
  #   enabled: true
  #   labels:
  #     type: pro
  #
  nodeSelector:
    enabled: false
    labels:

services:
  - name: example
    type: LoadBalancer
    ports:
      - name: http
        port: 9898
        targetPort: 9898
        protocol: TCP
    labels:
      app: example
      chart: example
      release: example


ingress:
  enabled: false
  alb:
    #
    # If you want to use AWS Application Load Balancer, first you have to deploy the official ALB chart
    # Link here: https://artifacthub.io/packages/helm/aws/aws-load-balancer-controller
    #
    enabled: true
    protocol: HTTP
    listenPorts: '[{"HTTP": 80}, {"HTTPS": 443}]'
    groupName: default-group
  path: /
  host: site.com
  annotations:

parameterStore:
  #
  # If you want to use aws parameter store, first you have to deploy csi-secrets-store-provider-aws official chart
  # Link here: https://artifacthub.io/packages/helm/aws/csi-secrets-store-provider-aws
  # Besides that, you have to create a new policy and a role for the service account to provide the secrets to the pods.
  #
  enabled: false

  #
  # If you want to mount your secret as a file, set this value to true.
  #
  mountAsFile: false

  #
  # Once you use mountAsFile, you need a path for your file
  #


  #
  # Parameters use to be separated by a dot, slash... so you can modify this splitter depeding on the format of your parameters in AWS.
  #
  splitter: /

  #
  # Set your parameters following the format you have on your parameter store:
  #
  # Example:
  #
  # data:
  #   your_env_var_name: /my/parameter/path
  #   your_env_var_name_2: /my/parameter/path_2
  #
  data:

  #
  # If you want to mount a file inside a pod with the paramater content, use this way.

  # Example:
  # dataAsFiles:
  #   my_key:
  #     ref: /my/parameter/path
  #     mountPath: /my/parameter/mount
  #     fileName: myfile.yaml
  dataAsFiles:


#
# Set secret values that will be stored in a Secret artifact and passed
# to de pods using an envFrom section
#
secrets: {}

#
# If you want to create a pv using a pvc you will have to:
# - Pass the value to "true" of "enable".
# - Add the values
volume:
  enabled: false
  #
  # You can enter any label you consider necessary
  # By default, it will have the same deployment
  labels:

  #
  # Remove comment for define the storage capacity in power-of-two equivalents:
  # Ei, Pi, Ti, Gi, Mi, Ki.
  # You can express storage as a plain integer or as a fixed-point number using one of these suffixes:
  # E, P, T, G, M, k.
  # For example, the following quantities all represent approximately the same value:
  #    128974848
  #    129M
  #    123Mi
  storageSize:

  #
  # Sintax: fs-<efsID>
  # Example:
  # efs_id: fs-8af4a940:
  efs_id:

  #
  # Example:
  # mount: /mnt/tools_dev
  mount: /var/www/html/

  #
  # securityContext
  # The GID and UID to run the entrypoint of the container process.
  # Uses runtime default if unset.
  # If set the value specified in SecurityContext takes precedence.
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#securitycontext-v1-core
  #
  runAsGroup: 0
  runAsUser: 1000140000
