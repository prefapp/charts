---
# Default chart values for proxified.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @param Set a labels for all resources
labels:
## For example:
##  bar: foo
##  foo: bar

## @param ConfigMap with extra environment variables
configmap: {}
## For example:
##  FOO: bar
##  BAR: foo

## @param Secrets with extra environment variables
secrets: {}
## For example:
##  FOO: bar
##  BAR: foo

## section to define who will have access to the service by filtering ips and ranges via proxy
whitelist:

  ## @bool true to enable filtering | false for open to the world
  enabled: false

  ## @param List of private ip ranges as the cidr of the cluster or the ip range of a peered network
  ## The cidr format for a cluster is imprescindible
  private_ranges: []
  ## For example:
  ##  - 10.0.0.0/16
  ##  - 172.0.0.0/16
  ## 

  ## @param List of public ip ranges
  ips: []
  ## For example:
  ##  - 1.2.3.4/32
  ##  - 4.3.2.1/32

## @ section to define the deployment behavior
deployment:

  ## @param Number of replicas. Supord 0 replicas for a deactivated service
  replicas: 1

  ## @param Optionally specify a volume to mount to the container such as a kubernetes standard volume
  volumeMounts:
  ## For example:
  ##  - mountPath: /tmp
  ##    name: tmp-dir
  volumes:
  ## For example:
  ##  - emptyDir: {}
  ##    name: tmp-dir

  ## @param Optionally specify a node selector to run the service on a specific node
  nodeSelector: {}
  ## For example:
  ## type: qa-worker

  ## @param Optionally specify a extra annotations to add to the deployment
  annotations:
  ## For example:
  ##  foo: bar
  ##  bar: foo

## @ section to define the proxy service behavior
proxy:

  ## @param A name for the container proxy container service
  name: proxy

  ## @param The image to use for the proxy container service
  image:
    registry: docker.io
    repository: prefapp/nginx-proxified
    tag: 0.1.0
  
  ## @param The image pull policy to use for the container proxy service
  imagePullPolicy: Always

  ## @param To active or deactive cors support
  cors: false

  ## Configure resource requests and limits
  resources:

    ## @param resources.requests [object] The requested resources for the container
    requests: {}
    ## For example:
    ##    memory: "64Mi"
    ##    cpu: "120m"
  
    ## @param resources.limits The resources limits for the container
    limits: {}
    ## For example:
    ##  memory: "128Mi"
    ##  cpu: "250m"

  ## @param Activate or deactivate maintenance mode to run the container in an empty state so that it can be debugged
  maintenance_mode: false

  ## @param Override default container command (useful when using custom images)
  command: []
  # For example:
  #  - echo

  ## @param args Override default container args (useful when using custom images)
  args: []
  # For example:
  #  - "Hello wolrd!!!, I am a proxy container"

## @ section to define the app service behavior
app:

  ## @param A name for the container app service
  name: app

  ## @param The image to use for the container app service
  image:
    registry: docker.io
    repository: library/httpd
    tag: alpine3.16

  ## @param The image pull policy to use for the container app service
  imagePullPolicy: Always

  ## @param Set a port for the container app service
  ## In this example the Httpd service port
  port: 80

## Configure resource requests and limits
  resources:

    ## @param resources.requests [object] The requested resources for the container
    requests: {}
    ## For example:
    ##    memory: "500Mi"
    ##    cpu: "500m"
  
    ## @param resources.limits The resources limits for the container
    limits: {}
    ## For example:
    ##  memory: "1000Mi"
    ##  cpu: "1000m"

  ## @param Activate or deactivate maintenance mode to run the container in an empty state so that it can be debugged
  maintenance_mode: false

  ## @param command Override default container command (useful when using custom images)
  command: []
  # For example:
  #  - echo

  ## @param args Override default container args (useful when using custom images)
  args: []
  # For example:
  #  - "Hello wolrd!!!, I am a app container"

  ## Configure extra options for liveness probe
  livenessProbe:
 
    ## @bool livenessProbe enabled or disabled | true or false | default: false
    enabled: false
 
    ## @param livenessProbe.httpGet.httpHeaders [array] Headers for livenessProbe
    httpGet:

      ## @param livenessProbe.httpGet.path Request path for livenessProbe
      path: /status
      
      ## @param livenessProbe.httpGet.port Port for livenessProbe
      port: 80

    ## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    initialDelaySeconds: 10

    ## @param livenessProbe.periodSeconds Period seconds for livenessProbe
    periodSeconds: 20

    ## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    timeoutSeconds: 10

    ## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
    failureThreshold: 10

    ## @param livenessProbe.successThreshold Success threshold for livenessProbe
    successThreshold: 1

  ## Configure extra options for liveness probe
  readinessProbe:
 
    ## @bool readinessProbe enabled or disabled | true or false | default: false
    enabled: false
 
    ## @param readinessProbe.httpGet.httpHeaders [array] Headers for readinessProbe
    httpGet:

      ## @param readinessProbe.httpGet.path Request path for readinessProbe
      path: /status

      ## @param readinessProbe.httpGet.port Port for readinessProbe
      port: 80

    ## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    initialDelaySeconds: 10

    ## @param readinessProbe.periodSeconds Period seconds for readinessProbe
    periodSeconds: 20

    ## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    timeoutSeconds: 10

    ## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
    failureThreshold: 10

    ## @param readinessProbe.successThreshold Success threshold for readinessProbe
    successThreshold: 1

  ## Configure extra options for liveness probe
  startupProbe:
 
    ## @bool startupProbe enabled or disabled | true or false | default: false
    enabled: false
 
    ## @param startupProbe.httpGet.httpHeaders [array] Headers for startupProbe
    httpGet:

      ## @param startupProbe.httpGet.path Request path for startupProbe
      path: /status

      ## @param startupProbe.httpGet.port Port for startupProbe
      port: 80

    ## @param startupProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    initialDelaySeconds: 10

    ## @param startupProbe.periodSeconds Period seconds for startupProbe
    periodSeconds: 20

    ## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
    timeoutSeconds: 10

    ## @param startupProbe.failureThreshold Failure threshold for startupProbe
    failureThreshold: 10

    ## @param startupProbe.successThreshold Success threshold for startupProbe
    successThreshold: 1

## @section to define the service behavior
service:

  ## @param A type for the service
  type: ClusterIP

## @bool ingress enabled or disabled | true or false | default: false
ingress_enabled: false

## @section to define the ingress behavior. Accepts multiple ingress definitions
ingress:

  ## @param A name for the ingress
  - name: external

    ## @param The tls configuration for the ingress
    tls: []
    ## For example:
    ##  - secretName: chart-example-tls
    ##    hosts:
    ##      - chart-example.local

    ## @param The hosts for the ingress
    host: foo.bar.me

    ## @param The path for the ingress
    paths:
      - /

    ## @param IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## @see https://kubernetes.io/docs/concepts/services-networking/ingress/#ingressclass-1-18
    ## No chamges this field if you don't know what you're really doing
    ingressClassName: alb

    ## @param The annotations for the ingress
    annotations: {}
      ## For example:
      ##  alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-west-1:xxxxxxxxxxxx:certificate/xxxxxxxxxxxxxxxxxxxxxxxx"

    ## @section to define the alb into the ingress behavior
    alb:

      ## @bool alb enabled or disabled | true or false | default: true
      enabled: true

      ## @param Define the name of scheme for the ingress.alb
      scheme: internet-facing

      ## @param Define the protocol for the ingress.alb
      protocol: HTTP

      ## @param Define the listen port for the ingress.alb
      listenPorts: '[{"HTTP": 80}, {"HTTPS": 443}]'

      ## @param Define the target group for the ingress.alb
      groupName: internet-facing
  
